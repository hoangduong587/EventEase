@page "/events/edit/{id:int}"
@inject EventService EventService

<PageTitle>Edit Event - EventEase</PageTitle>

@if (editEvent == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-8">
            <h1>Edit Event</h1>
            
            <EditForm Model="@editEvent" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-3">
                    <label for="title" class="form-label">Event Title</label>
                    <InputText id="title" class="form-control" @bind-Value="editEvent.Title" />
                    <ValidationMessage For="@(() => editEvent.Title)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea id="description" class="form-control" rows="4" @bind-Value="editEvent.Description" />
                    <ValidationMessage For="@(() => editEvent.Description)" class="text-danger" />
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="date" class="form-label">Date</label>
                        <InputDate id="date" class="form-control" @bind-Value="editEvent.Date" />
                        <ValidationMessage For="@(() => editEvent.Date)" class="text-danger" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="time" class="form-label">Time</label>
                        <InputText id="time" class="form-control" type="time" @bind-Value="editEvent.Time" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="location" class="form-label">Location</label>
                    <InputText id="location" class="form-control" @bind-Value="editEvent.Location" />
                    <ValidationMessage For="@(() => editEvent.Location)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="capacity" class="form-label">Capacity</label>
                    <InputNumber id="capacity" class="form-control" @bind-Value="editEvent.Capacity" />
                    <ValidationMessage For="@(() => editEvent.Capacity)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <div class="form-check">
                        <InputCheckbox id="isPublic" class="form-check-input" @bind-Value="editEvent.IsPublic" />
                        <label class="form-check-label" for="isPublic">
                            Make this event public
                        </label>
                    </div>
                </div>

                <div class="mb-3">
                    <button type="submit" class="btn btn-primary me-2">
                        <i class="bi bi-check-circle me-1"></i> Update Event
                    </button>
                    <a href="events/details/@Id" class="btn btn-secondary me-2">
                        <i class="bi bi-x-circle me-1"></i> Cancel
                    </a>
                    <button type="button" class="btn btn-danger" @onclick="DeleteEvent">
                        <i class="bi bi-trash me-1"></i> Delete Event
                    </button>
                </div>
            </EditForm>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Event Status</h5>
                </div>
                <div class="card-body">
                    @if (originalEvent != null)
                    {
                        <p><strong>Created:</strong> @originalEvent.CreatedDate.ToString("MMM dd, yyyy")</p>
                        <p><strong>Last Modified:</strong> @originalEvent.LastModified.ToString("MMM dd, yyyy")</p>
                        <p><strong>Current Registrations:</strong> @originalEvent.RegisteredCount</p>
                        
                        @if (originalEvent.RegisteredCount > 0)
                        {
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle me-1"></i>
                                <strong>Warning:</strong> This event has @originalEvent.RegisteredCount registered participants. 
                                Changes may affect their experience.
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    [Inject] public NavigationManager Navigation { get; set; } = default!;
    
    private EditEventModel? editEvent;
    private EventItem? originalEvent;

    protected override async Task OnInitializedAsync()
    {
        await LoadEventForEditing();
    }

    private async Task LoadEventForEditing()
    {
        originalEvent = await EventService.GetEventByIdAsync(Id);
        if (originalEvent == null)
        {
            Navigation.NavigateTo("events", false);
            return;
        }

        // Map to edit model
        editEvent = new EditEventModel
        {
            Title = originalEvent.Title,
            Description = originalEvent.Description,
            Date = originalEvent.Date.Date,
            Time = originalEvent.Date.ToString("HH:mm"),
            Location = originalEvent.Location,
            Capacity = originalEvent.Capacity,
            IsPublic = originalEvent.IsPublic
        };
    }

    private async Task HandleValidSubmit()
    {
        if (editEvent == null) return;

        try
        {
            var updateRequest = new UpdateEventRequest
            {
                Title = editEvent.Title,
                Description = editEvent.Description,
                Date = editEvent.Date,
                Time = editEvent.Time,
                Location = editEvent.Location,
                Capacity = editEvent.Capacity,
                IsPublic = editEvent.IsPublic
            };

            var updatedEvent = await EventService.UpdateEventAsync(Id, updateRequest);
            if (updatedEvent != null)
            {
                Navigation.NavigateTo($"events/details/{Id}", false);
            }
        }
        catch (Exception ex)
        {
            // In a real app, you would handle this error appropriately
            Console.WriteLine($"Error updating event: {ex.Message}");
        }
    }

    private async Task DeleteEvent()
    {
        if (originalEvent == null) return;

        // In a real app, you would show a confirmation dialog first
        if (originalEvent.RegisteredCount > 0)
        {
            // TODO: Show warning about registered participants
            return;
        }
        
        try
        {
            var success = await EventService.DeleteEventAsync(Id);
            if (success)
            {
                Navigation.NavigateTo("events", false);
            }
        }
        catch (Exception ex)
        {
            // In a real app, you would handle this error appropriately
            Console.WriteLine($"Error deleting event: {ex.Message}");
        }
    }

    public class EditEventModel
    {
        [Required(ErrorMessage = "Event title is required")]
        [StringLength(100, ErrorMessage = "Title cannot exceed 100 characters")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Description is required")]
        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Date is required")]
        public DateTime Date { get; set; }

        public string Time { get; set; } = "10:00";

        [Required(ErrorMessage = "Location is required")]
        [StringLength(200, ErrorMessage = "Location cannot exceed 200 characters")]
        public string Location { get; set; } = string.Empty;

        [Range(1, 10000, ErrorMessage = "Capacity must be between 1 and 10,000")]
        public int Capacity { get; set; } = 50;

        public bool IsPublic { get; set; } = true;
    }
}