@page "/events/create"
@inject EventService EventService

<PageTitle>Create Event - EventEase</PageTitle>

<h1>Create New Event</h1>

<div class="row">
    <div class="col-md-8">
        <EditForm Model="@newEvent" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="title" class="form-label">Event Title</label>
                <InputText id="title" class="form-control" @bind-Value="newEvent.Title" />
                <ValidationMessage For="@(() => newEvent.Title)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" class="form-control" rows="4" @bind-Value="newEvent.Description" />
                <ValidationMessage For="@(() => newEvent.Description)" class="text-danger" />
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="date" class="form-label">Date</label>
                    <InputDate id="date" class="form-control" @bind-Value="newEvent.Date" />
                    <ValidationMessage For="@(() => newEvent.Date)" class="text-danger" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="time" class="form-label">Time</label>
                    <InputText id="time" class="form-control" type="time" @bind-Value="newEvent.Time" />
                </div>
            </div>

            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <InputText id="location" class="form-control" @bind-Value="newEvent.Location" />
                <ValidationMessage For="@(() => newEvent.Location)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="capacity" class="form-label">Capacity</label>
                <InputNumber id="capacity" class="form-control" @bind-Value="newEvent.Capacity" />
                <ValidationMessage For="@(() => newEvent.Capacity)" class="text-danger" />
            </div>

            <div class="mb-3">
                <div class="form-check">
                    <InputCheckbox id="isPublic" class="form-check-input" @bind-Value="newEvent.IsPublic" />
                    <label class="form-check-label" for="isPublic">
                        Make this event public
                    </label>
                </div>
            </div>

            <div class="mb-3">
                <button type="submit" class="btn btn-primary me-2">Create Event</button>
                <a href="events" class="btn btn-secondary">Cancel</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateEventModel newEvent = new();

    private async Task HandleValidSubmit()
    {
        try
        {
            // Create the event using the EventService
            var createRequest = new CreateEventRequest
            {
                Title = newEvent.Title,
                Description = newEvent.Description,
                Date = newEvent.Date,
                Time = newEvent.Time,
                Location = newEvent.Location,
                Capacity = newEvent.Capacity,
                IsPublic = newEvent.IsPublic
            };

            var createdEvent = await EventService.CreateEventAsync(createRequest);
            
            // Navigate back to events list
            Navigation.NavigateTo("/events");
        }
        catch (Exception ex)
        {
            // In a real app, you would handle this error appropriately
            // For now, just log to console and stay on the page
            Console.WriteLine($"Error creating event: {ex.Message}");
        }
    }

    [Inject] public NavigationManager Navigation { get; set; } = default!;

    public class CreateEventModel
    {
        [Required(ErrorMessage = "Event title is required")]
        [StringLength(100, ErrorMessage = "Title cannot exceed 100 characters")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Description is required")]
        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Date is required")]
        public DateTime Date { get; set; } = DateTime.Today.AddDays(1);

        public string Time { get; set; } = "10:00";

        [Required(ErrorMessage = "Location is required")]
        [StringLength(200, ErrorMessage = "Location cannot exceed 200 characters")]
        public string Location { get; set; } = string.Empty;

        [Range(1, 10000, ErrorMessage = "Capacity must be between 1 and 10,000")]
        public int Capacity { get; set; } = 50;

        public bool IsPublic { get; set; } = true;
    }
}